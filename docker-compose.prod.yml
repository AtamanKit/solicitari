services:
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    # restart: always
    # ports:
    #   - 3000:3000
    env_file:
      - ./frontend/.env/.env.prod.web
    volumes:
      - react_build:/home/frontend/

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    command: gunicorn -c config/gunicorn/dev.py
    expose:
      - 8000
    volumes:
      - ./backend/static/:/home/backend/static/
      - ./backend/media/:/home/backend/media/
    env_file:
      - ./backend/.env/.env.prod.api
    depends_on:
      - db
      - redis

  daphne:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    command: daphne sol_proj.asgi:application --bind 0.0.0.0 --port 8001
    ports:
      - 8001:8001
    env_file:
      - ./backend/.env/.env.prod.api
    depends_on:
      - api
      - redis

  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env/.env.db

  redis:
    image: redis:alpine
    restart: always
    #command: redis-server --requirepass $$REDIS_PASSWORD --masterauth $$REDIS_PASSWORD --appendonly yes
    command:
    - /bin/sh
    - -c
    # - Double dollars, so that the variable is not expanded by Docker Compose
    # - Surround by quotes, so that the shell does not split the password
    # - The ${variable:?message} syntax causes shell to exit with a non-zero
    #   code and print a message, when the variable is not set or empty
    - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}" --masterauth "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}" --appendonly yes
    env_file:
      - ./backend/.env/.env.prod.redis
    ports:
      - 6379:6379

  nginx:
    build: ./nginx
    restart: always
    volumes:
      - react_build:/home/frontend/
      - ./backend/static/:/home/backend/static/
      - ./backend/media/:/home/backend/media/
      - ./certbot/www/:/var/www/certbot/
      - ./certbot/conf/:/etc/nginx/ssl/
    ports:
      - 80:80
      - 443:443
    depends_on:
      - daphne
      - web

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 24h & wait $${!}; certbot renew --webroot -w /var/www/certbot/ --quiet; done'"

volumes:
  postgres_data:
  react_build:
